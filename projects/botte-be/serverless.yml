# Docs:
#  - Serverless for AWS full specs: https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/
#  - Python reqs: https://www.serverless.com/framework/docs/providers/aws/guide/python
#  - IAM: https://www.serverless.com/framework/docs/providers/aws/guide/iam
#  - IAM Roles Per Function: https://www.serverless.com/framework/docs/providers/aws/guide/iam


service: botte-be


provider:
  name: aws
  runtime: python3.13
  region: eu-south-1
  stage: prod # Default stage to be used. If omitted the default is `dev`. Override with `sls deploy --stage prod`.
  memorySize: 256 # Default is 1024.
  timeout: 15 # Default is 6 seconds. Note: API Gateway current maximum is 30 seconds.
  logRetentionInDays: 90 # Set the default RetentionInDays for a CloudWatch LogGroup. Default is never expire.
  environment: # Env vars. Use it also for secrets in Parameter Store and - if this project has Dynaconf - config to override those in `settings_default.toml`.
    # Note: it's better to store all env vars here rather than nested under `functions:`
    #  so they are available to all Lambdas and to the `/settings` introspection endpoint.
    # Some are from ssm Parameter Store: https://www.serverless.com/framework/docs/providers/aws/guide/variables#reference-variables-using-the-ssm-parameter-store
    TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN, ssm:/botte-be/${sls:stage}/telegram-token, 'XXX'}
    API_AUTHORIZER_TOKEN: ${env:API_AUTHORIZER_TOKEN, ssm:/botte-be/${sls:stage}/api-authorizer-token, 'XXX'}
  httpApi:
    authorizers:
      tokenAuthorizer:
        type: request
        functionName: authorizer
        enableSimpleResponses: true
        # Note: you can manually clear the cache by temporary setting this value
        #  to 0 in AWS web console. But then switch it back to 3600.
        resultTtlInSeconds: 3600 # Cache authorizer results for 1 hour.
        identitySource:
          # All these should be sent for a request to be valid.
          - $request.header.Authorization # The header to be cached.
  tags: # CloudFormation tags to apply to Lambdas and everything that supports them.
    project: ${self:service}
    environment: ${sls:stage}
    managed-with: Serverless framework
    monorepo: https://github.com/puntonim/botte-monorepo
    source: ${self:custom.source}
  stackTags: ${self:provider.tags}
  deploymentBucket:
    blockPublicAccess: true # Prevent public access via ACLs or bucket policies. Default is false.
    tags: ${self:provider.tags} # Tags to add to each of the deployment resources.
  layers:
    # The order of layers matters as they override each other's common files.
    # So keep you actual requirements layer as the last layer in the list,
    #  but right before the vendored layer, if you have any.
    #
    # Powertools for AWS Lambda (Python): https://docs.powertools.aws.dev/lambda/python/latest/.
    - arn:aws:lambda:${self:provider.region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-x86_64:18
    # All requirements packaged by `serverless-python-requirements` plugin.
    - Ref: PythonRequirementsLambdaLayer


functions:
  authorizer:
    handler: botte_be.views.authorizer_view.lambda_handler
    memorySize: 128
    maximumRetryAttempts: 0
    iam:
      role:
        statements: []

  # Interface: API Gateway V2.
  endpoint-introspection:
    handler: botte_be.views.endpoint_introspection_view.lambda_handler
    timeout: 5
    maximumRetryAttempts: 0
    events:
      - httpApi:
          path: /version
          method: GET
      - httpApi:
          path: /health
          method: GET
      - httpApi:
          path: /unhealth
          method: GET
    iam:
      role:
        statements: []

  # Interface: Lambda direct invocation.
  message:
    handler: botte_be.views.message_view.lambda_handler
    timeout: 28 # Note: API Gateway current maximum is 29 seconds.
    maximumRetryAttempts: 0
    iam:
      role:
        statements: []

  # Interface: API Gateway V2.
  endpoint-message:
    handler: botte_be.views.endpoint_message_view.lambda_handler
    timeout: 28 # Note: API Gateway current maximum is 29 seconds.
    maximumRetryAttempts: 0
    events:
      - httpApi:
          path: /message
          method: POST
          authorizer:
            name: tokenAuthorizer
    iam:
      role:
        statements: []


package:
  # `individually: true` should only be used for a project with multiple modules each with their own specific dependencies.
  #  Docs: https://www.serverless.com/plugins/serverless-python-requirements#per-function-requirements
  individually: false
  patterns: # Specify the directories and files which should be included in the deployment package. Order matters.
    - "!**"
    - botte_be/**
    - "!**/__pycache__/**"
    - pyproject.toml
    - serverless.yml


custom:
  # Constants.
  source: https://github.com/puntonim/botte-monorepo/blob/main/projects/botte-be/serverless.yml

  # Plugin: serverless-python-requirements.
  pythonRequirements:
    # With the layer option, a new layer is created with the naming convention ${self:service}-${sls:stage}-python-requirements.
    layer: True
    slim: true # Strip the .so files, remove __pycache__, etc. See: https://www.serverless.com/plugins/serverless-python-requirements.
    # When deploying from local dev machine, it's important to disable useStaticCache, useDownloadCache and pip cache
    #  in order to ensure that local libs (like `events`) are always rebuilt.
    useStaticCache: false
    useDownloadCache: false
    # Use `--no-deps` because all deps are listed in poetry.lock and then exported to requirements.txt.
    # Also, without using `--no-deps` caused an issue with the versioning of git deps (datetime-utils and strava-client).
    pipCmdExtraArgs: ["--no-cache-dir --no-deps"]


# Raw CloudFormation template syntax, in YAML.
# Docs: https://www.serverless.com/framework/docs/providers/aws/guide/resources.
resources:
  # Set the description in the CloudFormation stack.
  Description: Managed by Serverless at ${self:custom.source}
